@startuml
title Get Parks Activity

actor Client
participant "API Gateway" as APIGateway
participant Lambda
participant GetParksActivity
participant ParkDao
participant ModelConverter
database DynamoDB

Client -> APIGateway : GET /parks
activate Client
APIGateway -> Lambda
activate Lambda
activate GetParksActivity
activate ParkDao
Lambda -> GetParksActivity : handleRequest(GetParksRequest, Context)
GetParksActivity -> ParkDao : getAllParks()
ParkDao -> DynamoDB : load a list of all parks

alt #lightblue if location is provided
    GetParksActivity -> ParkDao : getParksByLocation(location : String)
    ParkDao -> DynamoDB : load a list of parks filtered by location
    else if avgRating is provided
    GetParksActivity -> ParkDao : getParksByAvgRating(avgRating : Double)
    ParkDao -> DynamoDB : load a list of parks filtered by avgRating
    else if location and avgRating is provided
    GetParksActivity -> ParkDao : getParksByLocationAndAvgRating(location : String, avgRating : Double)
    ParkDao -> DynamoDB : load a list of parks filtered by location and avgRating
    else otherwise, continue
end

alt #lightpink if no parks exist
    ParkDao <-- DynamoDB : null
    Lambda <-- ParkDao : throw ParksNotFoundException
    APIGateway <-- Lambda
    Client <-- APIGateway : 400 Response
    else otherwise, continue
end

ParkDao <-- DynamoDB : ParkList
GetParksActivity <-- ParkDao : ParkList
GetParksActivity --> ModelConverter : toParkModelList(ParkList)
activate ModelConverter
GetParksActivity <-- ModelConverter : ParkModelList
deactivate ModelConverter
Lambda <-- GetParksActivity : GetParksResult
APIGateway <-- Lambda
deactivate ParkDao
deactivate GetParksActivity
deactivate Lambda
Client <-- APIGateway : 200 Response
deactivate Client

@enduml
