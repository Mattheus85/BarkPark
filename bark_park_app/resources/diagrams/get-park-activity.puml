@startuml
title Get Park

actor Client
participant "API Gateway" as APIGateway
participant Lambda
participant GetParkActivity
participant ParkDao
participant ModelConverter
database DynamoDB

Client -> APIGateway : GET /parks/:parkId
activate Client
APIGateway -> Lambda
activate Lambda
activate GetParkActivity
activate ParkDao
Lambda -> GetParkActivity : handleRequest(GetParkRequest, Context)
GetParkActivity -> ParkDao : getPark(id : String)
ParkDao -> DynamoDB : load park by ID
alt if park ID does not exist
    ParkDao <-- DynamoDB : null
    Lambda <-- ParkDao : throw ParkNotFoundException
    APIGateway <-- Lambda
    Client <-- APIGateway : 400 Response
else otherwise, continue
end

ParkDao <-- DynamoDB : Park
GetParkActivity <-- ParkDao : Park
GetParkActivity -> ModelConverter : toParkModel(Park)
activate ModelConverter
GetParkActivity <-- ModelConverter : ParkModel
deactivate ModelConverter
Lambda <-- GetParkActivity : GetParkResult
APIGateway <-- Lambda
deactivate ParkDao
deactivate GetParkActivity
deactivate Lambda
Client <-- APIGateway : 200 Response
deactivate Client

@enduml